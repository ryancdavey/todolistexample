import React, {Component} from 'react';
import { BrowserRouter as Router, Route } from "react-router-dom";
import "bootstrap/dist/css/bootstrap.min.css";

import TaskList from './components/TaskList.js';
import AddTaskForm from './components/Add.js';

import Navbar from "./components/Navbar.component"
import TasksList from "./components/task-list.component";
import EditTask from "./components/edit-task.component";
import CreateTask from "./components/create-task.component";

const uuid = require('uuid/v4');


class App extends Component {
    startingId = 2;
    state = {
      tasks: [{
          "id": this.createUniqueId(),
          "title": "Make presentation slides",
          "category": "Work"
        },
        {
          "id": this.createUniqueId(),
          "title": "Sign birthday card",
          "category": "Social"
        },
        {
          "id": this.createUniqueId(),
          "title": "Take out trash",
          "category": "Personal"
        }
      ],
      completedTasks: [],
      editing: false
    }
    addTask = f=>f;
    updateTask = f=>f;
    deleteTask = f=>f;
    completeTask = f=>f;

/**
  * adds task to the task list
  * @param   {string}   title - text value for the newly created task
  * @param   {string}   category - type for the newly created task
  */
    addTask(title, category) {
      this.setState(prevState => ({
        tasks: [
          ...prevState.tasks,
          {
            id: this.createUniqueId(),
            title,
            category
          }
        ]
      }));
    }

/**
  * updates text for the 
  * @param   {integer}   id - unique identifier for the task
  * @param   {string}   title - new text label value for the task
  */
  updateTask(id, title) {
    this.setState(prevState => ({
      tasks: prevState.tasks.map(task =>
        (task.id !== id) ?
          task :
          {
            ...task,
            title,
          }
      )
    }));
  }

/**
  * deletes tasks in the list
  * @param   {integer}   id - unique identifier for the task
  */
  deleteTask(id) {
    this.setState(prevState => ({
      tasks: prevState.tasks.filter(task => task.id !== id)
    }))
  }

/**
  * completes tasks in the list and adds to completed list
  * @param   {integer}   id - unique identifier for the task
  */
  completeTask(id) {
    console.log(id); 
    this.setState(prevState => ({
      completedTasks: prevState.tasks.map(task =>
        (task._id === id) ?
        this.completedTasks :
          [
            ...this.completedTasks,
            task,
          ]
      ),
      tasks: prevState.tasks.filter(task => task.id !== id)
    }));

    // @brodey - You'll have to take this task ID and create a new list of tasks in your UI
    // @brodey - It will look something like: { completedTasts: [{ ... }] }
    // @brodey - So in this handler, you'll do a find on the task with the above ID, and add it to that completedTasks array.
    // @brodey - Once that's done, you'll filter that out of the previous array.
  }

  /**
    * Creates unique id for a newly created task
    * @return  {string}  id - a uuid generated by uuid package
    */
  createUniqueId() {
    this.startingId += 1; // @brodey - No need to do this. Just do: { id: uuid.v4() }
    let id = 'id-' + this.startingId;
    return id;
  }

  render() {
    const { addTask, updateTask, deleteTask, completeTask } = this;
    const { tasks, completedTasks } = this.state;
    return (
      <Router>
          <div className="container">
            <Navbar />
            <br/>
            <Route path="/" exact component={TasksList} />
            <Route path="/edit/:id" component={EditTask} />
            <Route path="/create" component={CreateTask} />
          </div>
          {/* <div className="app">
            <TaskList
              tasks={tasks}
              onUpdate={updateTask}
              onRemove={deleteTask}
              onCompletion={completeTask} 
            />   
          </div>
          <div className="col-md-12">
            <AddTaskForm onNewTask={addTask} />
          </div>
          <div className="completed">
            <h1>Completed</h1>
            <TaskList
              tasks={completedTasks}
              onUpdate={updateTask}
              onRemove={deleteTask}
              onCompletion={completeTask} 
            />  
          </div> */}
        
      </Router>
    )
  } 
}

export default App;
