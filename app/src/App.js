import React, {Component} from 'react';
import './App.css';
import TaskList from './TaskList';
import AddTaskForm from './Add';

const uuid = require('uuid/v4');

class App extends Component {

    state = {
      tasks: [{
          "id": this.createUniqueId(),
          "title": "Make presentation slides",
          "category": "Work"
        },
        {
          "id": this.createUniqueId(),
          "title": "Sign birthday",
          "category": "Social"
        },
        {
          "id": this.createUniqueId(),
          "title": "Take out trash",
          "category": "Personal"
        }
      ],
      completedTasks: [],
      editing: false
    }
    addTask = f=>f;
    updateTask = f=>f;
    deleteTask = f=>f;
    completeTask = f=>f;

  // componentDidMount() {  
  //   this.ajax({  
  //     url: "api/getdata",  
  //     type: "GET",  
  //     dataType: 'json',  
  //     ContentType: 'application/json',  
  //     success: function(data) {           
  //       this.setState({tasks: data});   
  //     }.bind(this),  
  //     error: function(jqXHR) {  
  //       console.log(jqXHR);  
  //     }.bind(this)  
  //   });  
  // }  

/**
  * adds task to the task list
  * @param   {string}   title - text value for the newly created task
  * @param   {string}   category - type for the newly created task
  */
    addTask(title, category) {
      this.setState(prevState => ({
        tasks: [
          ...prevState.tasks,
          {
            id: this.createUniqueId(),
            title,
            category
          }
        ]
      }));
    }


/**
  * updates text for the 
  * @param   {integer}   id - unique identifier for the task
  * @param   {string}   title - new text label value for the task
  */
  updateTask(id, title) {
    this.setState(prevState => ({
      tasks: prevState.tasks.map(task =>
        (task.id !== id) ?
          task :
          {
            ...task,
            title,
          }
      )
    }));
  }

/**
  * deletes tasks in the list
  * @param   {integer}   id - unique identifier for the task
  */
  deleteTask(id) {
    this.setState(prevState => ({
      tasks: prevState.tasks.filter(task => task.id !== id)
    })); 
  }

  completeTask(id) {
    console.log(id);
    this.setState(prevState => ({
      completedTasks: [prevState.completedTasks, prevState.tasks.filter(task => task.id === id)],
      tasks: prevState.tasks.filter(task => task.id !== id)
    })); 
  }

  /**
    * Creates unique id for a newly created task
    * @return  {string}  id - a uuid generated by uuid package
    */
  createUniqueId() {
    {id: uuid()}
    //return uuid()
  }

  render() {
    const { addTask, updateTask, deleteTask, completeTask } = this;
    const { tasks, completedTasks } = this.state;
    return (
      <body>
        <div className="app">
          <TaskList
            tasks={tasks}
            onUpdate={updateTask}
            onRemove={deleteTask}
            onCompletion={completeTask} 
          />   
        </div>
        <div className="col-md-12">
        <AddTaskForm onNewTask={addTask} />
        </div>
        <div className="completed">
          <h1>Completed</h1>
          <TaskList
            tasks={completedTasks}
            onUpdate={updateTask}
            onRemove={deleteTask}
            onCompletion={completeTask} 
          />  
          
        </div>
      </body>
    )
  } 

}

export default App;
